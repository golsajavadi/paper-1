import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Generate synthetic dataset
def generate_synthetic_data(num_turbines, start_date, end_date):
    np.random.seed(0)
    date_range = pd.date_range(start=start_date, end=end_date, freq='H')
    weather_data = pd.DataFrame({
        'Date': date_range
    })
    for i in range(num_turbines):
        weather_data[f'Wind_Speed_Turbine_{i+1}'] = np.random.uniform(0, 25, len(date_range))
    weather_data['Temperature'] = np.random.uniform(-10, 40, len(date_range))
    weather_data['Humidity'] = np.random.uniform(0, 100, len(date_range))
    weather_data['Energy_Output'] = 100 * (weather_data['Wind_Speed_Turbine_1'] ** 2) + \
                                     np.random.normal(0, 200, len(date_range))
    return weather_data

# Generate synthetic data for 5 turbines
weather_data = generate_synthetic_data(num_turbines=5, start_date='2020-01-01', end_date='2021-12-31')

# Split data into features and target
X = weather_data.drop(['Date', 'Energy_Output'], axis=1)
y = weather_data['Energy_Output']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train random forest regressor
model_rf = RandomForestRegressor(n_estimators=100, random_state=42)
model_rf.fit(X_train, y_train)

# Make predictions using random forest regressor
y_pred_rf = model_rf.predict(X_test)

# Evaluate random forest regressor
mse_rf = mean_squared_error(y_test, y_pred_rf)

# Create a table to display the dataset and results
results_df = pd.DataFrame({
    'Actual Energy Output': y_test,
    'Predicted Energy Output (Random Forest)': y_pred_rf
})

# Display the dataset and results
print("Synthetic Dataset and Results:")
print(weather_data.head())
print("\n")

# Print the MSE for Random Forest
print(f'Random Forest Regressor Mean Squared Error: {mse_rf}')
print("\n")

# Print the results table
print("Results Table:")
print(results_df.head())
print("\n")

# Plot actual vs predicted energy output for Random Forest Regressor
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_rf, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual Energy Output')
plt.ylabel('Predicted Energy Output (Random Forest)')
plt.title('Actual vs Predicted Energy Output (Random Forest)')
plt.show()
